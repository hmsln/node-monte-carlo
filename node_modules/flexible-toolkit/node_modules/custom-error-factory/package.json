{
  "name": "custom-error-factory",
  "version": "1.0.1",
  "description": "A factory to create instantiable custom error objects, extending native error types",
  "keywords": [
    "error",
    "custom",
    "factory"
  ],
  "main": "index.js",
  "scripts": {
    "test": "jasmine-node test"
  },
  "devDependencies": {
    "jasmine-node": "^1.14.5"
  },
  "engines": {
    "node": "^4.1.2"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hmsln/custom-error-factory.git"
  },
  "author": {
    "name": "Hubert Maslin",
    "email": "hubert.maslin@gmail.com"
  },
  "license": "MIT",
  "readme": "# Custom Error Factory\n\n```custom-error-factory``` is an open source module that exposes a factory function to create instantiable custom error classes, extending native error types.\n\nUsing custom error classes allows you to store more information,a nd in a clearer way, than in a standard object. This can make custom errors easier to retrieve and analyse once being logged.\n\nInstall with the command ```npm install custom-error-factory```\n\n## Creating a custom error class\n\nYou can create a custom error type using the function ```customErrorFactory```,\nwhich returns the constructor of the custom error class.\n\n```js\n//built-in error class to inherit from\nvar type = TypeError;\n\n//custom error name\nvar name = 'Invalid_Delay_Granularity_Error';\n\n//custom error message (can be overwritten at the instance level)\nvar defaultMessage = 'This is not a recognized time period. Try: \\'seconds\\', \\'minutes\\', \\'hours\\'.';\n\nvar InvalidDelayGranularityError = customErrorFactory(type,\n\tname,\n\tdefaultMessage);\n```\n\nYou can then create an instance of this custom error class:\n\n```js\nvar e = new InvalidDelayGranularityHRError();\n```\n\nYou can pass additional properties to the constructor:\n```js\nvar obj = {\n\tfoo: 'bar'\n};\n\nvar e = new InvalidDelayGranularityError(obj);\n```\n\nYou can also overwrite the default message:\n\n```js\nvar e = new InvalidDelayGranularityHRError('overwritten message');\n```\n\nAnd also overwrite the default message and pass additional properties at the same time:\n\n```js\nvar obj = {\n\tfoo: 'bar'\n};\n\nvar e = new InvalidDelayGranularityHRError(obj, 'overwritten message');\n```\n\n## Tests\n\nThe test spec is in ```/test/test.spec.js```, and the test suite is ```jasmine-node```, which you can install by\nrunning ```npm install -g jasmine-node```\n\nYou can run the tests with the commands ```jasmine-node test``` or ```npm run test```\n\n## To do\n\nPerhaps some integration with an error logging library? This would be a good way to leverage the extra information\nthat can be stored in a custom error object.\n\nThank you for reading this far. If you have any bugs to report or improvements to suggest you can send me an email\nat hubert.maslin@gmail.com.",
  "readmeFilename": "README.md",
  "gitHead": "60c73e7c5a4ff2f03ae8848274710831f2753781",
  "bugs": {
    "url": "https://github.com/hmsln/custom-error-factory/issues"
  },
  "homepage": "https://github.com/hmsln/custom-error-factory#readme",
  "_id": "custom-error-factory@1.0.1",
  "_shasum": "65fb4a9534392796bdc6614209aff6c1121b0bac",
  "_from": "custom-error-factory@*"
}
